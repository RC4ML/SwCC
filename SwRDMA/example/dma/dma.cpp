#include "dma.hpp"

#include <QDMAController.hpp>

#include <map>
#include <memory>
#include <string>
#include <string_view>

#include <fmt/core.h>
#include <fmt/chrono.h>
#include <fmt/ranges.h>
#include <fmt/os.h>
#include <fmt/args.h>
#include <fmt/ostream.h>
#include <fmt/std.h>
#include <fmt/color.h>

#include <unistd.h>
#include <cmath>

void throughput_benchmark_print_counters(FPGACtl *fpga_ctl) {
    // Print counters, copied from code generated by Chisel project.
    
    //Report width 32:
    fmt::println("tlb.io.tlb_miss_count                                       : {}", fpga_ctl->readReg(512+400));
    fmt::println("io.c2h_cmd.[fire]                                           : {}", fpga_ctl->readReg(512+401));
    fmt::println("io.h2c_cmd.[fire]                                           : {}", fpga_ctl->readReg(512+402));
    fmt::println("io.c2h_data.[fire]                                          : {}", fpga_ctl->readReg(512+403));
    fmt::println("io.h2c_data.[fire]                                          : {}", fpga_ctl->readReg(512+404));
    fmt::println("fifo_c2h_cmd.io.out.[fire]                                  : {}", fpga_ctl->readReg(512+405));
    fmt::println("fifo_h2c_cmd.io.out.[fire]                                  : {}", fpga_ctl->readReg(512+406));
    fmt::println("fifo_c2h_data.io.out.[fire]                                 : {}", fpga_ctl->readReg(512+407));
    fmt::println("fifo_h2c_data.io.in.[fire]                                  : {}", fpga_ctl->readReg(512+408));

    //Report width 1:
    fmt::println("fifo_c2h_cmd.io.out.valid                                   : {}", (fpga_ctl->readReg(512+409) >> 0) & 1);
    fmt::println("fifo_c2h_cmd.io.out.ready                                   : {}", (fpga_ctl->readReg(512+409) >> 1) & 1);
    fmt::println("fifo_h2c_cmd.io.out.valid                                   : {}", (fpga_ctl->readReg(512+409) >> 2) & 1);
    fmt::println("fifo_h2c_cmd.io.out.ready                                   : {}", (fpga_ctl->readReg(512+409) >> 3) & 1);
    fmt::println("fifo_c2h_data.io.out.valid                                  : {}", (fpga_ctl->readReg(512+409) >> 4) & 1);
    fmt::println("fifo_c2h_data.io.out.ready                                  : {}", (fpga_ctl->readReg(512+409) >> 5) & 1);
    fmt::println("fifo_h2c_data.io.in.valid                                   : {}", (fpga_ctl->readReg(512+409) >> 6) & 1);
    fmt::println("fifo_h2c_data.io.in.ready                                   : {}", (fpga_ctl->readReg(512+409) >> 7) & 1);
}

void random_benchmark_print_counters(FPGACtl *fpga_ctl) {
    // Print counters, copied from code generated by Chisel project.
    
    //Report width 32:
    fmt::println("tlb.io.tlb_miss_count                                       : {}", fpga_ctl->readReg(512+300));
    fmt::println("io.c2h_cmd.[fire]                                           : {}", fpga_ctl->readReg(512+301));
    fmt::println("io.h2c_cmd.[fire]                                           : {}", fpga_ctl->readReg(512+302));
    fmt::println("io.c2h_data.[fire]                                          : {}", fpga_ctl->readReg(512+303));
    fmt::println("io.h2c_data.[fire]                                          : {}", fpga_ctl->readReg(512+304));
    fmt::println("fifo_c2h_cmd.io.out.[fire]                                  : {}", fpga_ctl->readReg(512+305));
    fmt::println("fifo_h2c_cmd.io.out.[fire]                                  : {}", fpga_ctl->readReg(512+306));
    fmt::println("fifo_c2h_data.io.out.[fire]                                 : {}", fpga_ctl->readReg(512+307));
    fmt::println("fifo_h2c_data.io.in.[fire]                                  : {}", fpga_ctl->readReg(512+308));

    //Report width 1:
    fmt::println("fifo_c2h_cmd.io.out.valid                                   : {}", (fpga_ctl->readReg(512+309) >> 0) & 1);
    fmt::println("fifo_c2h_cmd.io.out.ready                                   : {}", (fpga_ctl->readReg(512+309) >> 1) & 1);
    fmt::println("fifo_h2c_cmd.io.out.valid                                   : {}", (fpga_ctl->readReg(512+309) >> 2) & 1);
    fmt::println("fifo_h2c_cmd.io.out.ready                                   : {}", (fpga_ctl->readReg(512+309) >> 3) & 1);
    fmt::println("fifo_c2h_data.io.out.valid                                  : {}", (fpga_ctl->readReg(512+309) >> 4) & 1);
    fmt::println("fifo_c2h_data.io.out.ready                                  : {}", (fpga_ctl->readReg(512+309) >> 5) & 1);
    fmt::println("fifo_h2c_data.io.in.valid                                   : {}", (fpga_ctl->readReg(512+309) >> 6) & 1);
    fmt::println("fifo_h2c_data.io.in.ready                                   : {}", (fpga_ctl->readReg(512+309) >> 7) & 1);
}

void reset_counters(FPGACtl *fpga_ctl) {
    fpga_ctl->writeReg(14, 1);
    fpga_ctl->writeReg(14, 0);
}

void h2c_benchmark(uint8_t pci_bus) {
    fmt::println("=====H2C throughput benchmark start=====");
    
    size_t size = 1UL*1024*1024*1024;

    FPGACtl::explictInit(pci_bus, 4 * 1024 * 1024);
    auto fpga_ctl = FPGACtl::getInstance(pci_bus);

    auto cpu_mem_ctl = CPUMemCtl::getInstance(1UL * 1024 * 1024 * 1024);

    cpu_mem_ctl->writeTLB([=](uint32_t page_index, uint32_t page_size, uint64_t vaddr, uint64_t paddr) {
        fpga_ctl->writeReg(8, (uint32_t) (vaddr));
        fpga_ctl->writeReg(9, (uint32_t) ((vaddr) >> 32));
        fpga_ctl->writeReg(10, (uint32_t) (paddr));
        fpga_ctl->writeReg(11, (uint32_t) ((paddr) >> 32));
        fpga_ctl->writeReg(12, (page_index == 0));
        fpga_ctl->writeReg(13, 1);
        fpga_ctl->writeReg(13, 0);
    });

    auto dma_buff = cpu_mem_ctl->alloc(size);
    auto p = (uint32_t *) dma_buff;

    uint32_t is_seq = 1;
    uint32_t length = 1 * 1024;
    uint32_t offset = 0;
    uint32_t total_qs = 4;
    uint32_t total_cmds = 256 * 1024;
    uint32_t total_words = length / 64 * total_cmds;
    uint32_t range = 16 * 1024 * 1024;
    uint32_t range_words = range / 64;


    for (int i = 0; i < total_words; i++) {//initial
        for (int j = 0; j < 16; j++) {
            p[i * 16 + j] = i;
        }
    }

    fpga_ctl->writeReg(100, (uint32_t) ((uint64_t) p >> 32));
    fpga_ctl->writeReg(101, (uint32_t) ((uint64_t) p));
    fpga_ctl->writeReg(102, length);
    fpga_ctl->writeReg(103, offset);
    fpga_ctl->writeReg(104, 1); //sop
    fpga_ctl->writeReg(105, 1); //eop
    fpga_ctl->writeReg(107, total_words);
    fpga_ctl->writeReg(108, total_qs);
    fpga_ctl->writeReg(109, total_cmds);
    fpga_ctl->writeReg(110, range);
    fpga_ctl->writeReg(111, range_words);
    fpga_ctl->writeReg(112, is_seq);

    reset_counters(fpga_ctl);

    //start
    fpga_ctl->writeReg(106, 0);
    fpga_ctl->writeReg(106, 1);

    sleep(1);

    auto cycles = fpga_ctl->readReg(512 + 101);

    fmt::println("Number of errors: {}", fpga_ctl->readReg(512 + 100));
    fmt::println("Cycles: {}", cycles);

    double speed = 1.0 * length * total_cmds / (1.0 * cycles * 4 / 1000 / 1000 / 1000) / 1024 / 1024 / 1024;

    fmt::println("Total length: {}", total_words * 64);
    fmt::println("Speed: {:.2f}", speed);
    fmt::println("Expected words per q: {:x}", total_words / total_qs);

    fmt::print("Real words per q: ");
    for (int i = 0; i < 16; ++i) {
        fmt::print("{:x} ", fpga_ctl->readReg(512 + 102 + i));
    }
    fmt::print("\n");

    cpu_mem_ctl->free(dma_buff);

    throughput_benchmark_print_counters(fpga_ctl);
}

void gpu_h2c_benchmark(uint8_t pci_bus) {
    fmt::println("=====GPU H2C throughput benchmark start=====");

    size_t size = 1UL * 1024 * 1024 * 1024;

    FPGACtl::explictInit(pci_bus, 4 * 1024 * 1024);
    auto fpga_ctl = FPGACtl::getInstance(pci_bus);

    auto cpu_mem_ctl = GPUMemCtl::getInstance(0, 1UL * 1024 * 1024 * 1024);

    cpu_mem_ctl->writeTLB([=](uint32_t page_index, uint32_t page_size, uint64_t vaddr, uint64_t paddr) {
        fpga_ctl->writeReg(8, (uint32_t) (vaddr));
        fpga_ctl->writeReg(9, (uint32_t) ((vaddr) >> 32));
        fpga_ctl->writeReg(10, (uint32_t) (paddr));
        fpga_ctl->writeReg(11, (uint32_t) ((paddr) >> 32));
        fpga_ctl->writeReg(12, (page_index == 0));
        fpga_ctl->writeReg(13, 1);
        fpga_ctl->writeReg(13, 0);
    }, true);

    auto dma_buff = cpu_mem_ctl->alloc(size);
    auto p = (uint32_t *) dma_buff;

    uint32_t is_seq = 1;
    uint32_t length = 1 * 1024;
    uint32_t offset = 0;
    uint32_t total_qs = 4;
    uint32_t total_cmds = 256 * 1024;
    uint32_t total_words = length / 64 * total_cmds;
    uint32_t range = 16 * 1024 * 1024;
    uint32_t range_words = range / 64;


    for (int i = 0; i < total_words; i++) {//initial
        for (int j = 0; j < 16; j++) {
            p[i * 16 + j] = i;
        }
    }

    fpga_ctl->writeReg(100, (uint32_t) ((uint64_t) p >> 32));
    fpga_ctl->writeReg(101, (uint32_t) ((uint64_t) p));
    fpga_ctl->writeReg(102, length);
    fpga_ctl->writeReg(103, offset);
    fpga_ctl->writeReg(104, 1); //sop
    fpga_ctl->writeReg(105, 1); //eop
    fpga_ctl->writeReg(107, total_words);
    fpga_ctl->writeReg(108, total_qs);
    fpga_ctl->writeReg(109, total_cmds);
    fpga_ctl->writeReg(110, range);
    fpga_ctl->writeReg(111, range_words);
    fpga_ctl->writeReg(112, is_seq);

    reset_counters(fpga_ctl);

    //start
    fpga_ctl->writeReg(106, 0);
    fpga_ctl->writeReg(106, 1);

    sleep(1);

    auto cycles = fpga_ctl->readReg(512 + 101);

    fmt::println("Number of errors: {}", fpga_ctl->readReg(512 + 100));
    fmt::println("Cycles: {}", cycles);

    double speed = 1.0 * length * total_cmds / (1.0 * cycles * 4 / 1000 / 1000 / 1000) / 1024 / 1024 / 1024;

    fmt::println("Total length: {}", total_words * 64);
    fmt::println("Speed: {:.2f}", speed);
    fmt::println("Expected words per q: {:x}", total_words / total_qs);

    fmt::print("Real words per q: ");
    for (int i = 0; i < 16; ++i) {
        fmt::print("{:x} ", fpga_ctl->readReg(512 + 102 + i));
    }
    fmt::print("\n");

    cpu_mem_ctl->free(dma_buff);

    throughput_benchmark_print_counters(fpga_ctl);
}

void c2h_benchmark(uint8_t pci_bus){
    fmt::println("=====C2H throughput benchmark start=====");

    auto fpga_ctl = FPGACtl::getInstance(pci_bus);

    auto cpu_mem_ctl = CPUMemCtl::getInstance(1UL * 1024 * 1024 * 1024);
    
    size_t size = 1L*1024*1024*1024;

    cpu_mem_ctl->writeTLB([=](uint32_t page_index, uint32_t page_size, uint64_t vaddr, uint64_t paddr) {
        fpga_ctl->writeReg(8, (uint32_t) (vaddr));
        fpga_ctl->writeReg(9, (uint32_t) ((vaddr) >> 32));
        fpga_ctl->writeReg(10, (uint32_t) (paddr));
        fpga_ctl->writeReg(11, (uint32_t) ((paddr) >> 32));
        fpga_ctl->writeReg(12, (page_index == 0));
        fpga_ctl->writeReg(13, 1);
        fpga_ctl->writeReg(13, 0);
    });

    auto dma_buff = cpu_mem_ctl->alloc(size);
    auto p = (uint32_t *) dma_buff;

    memset(p, 0, size);

    uint32_t length = 32*1024;
    uint32_t offset = 3;
    uint32_t total_cmds = 32*1024;
    uint32_t total_qs = 4;
    uint32_t total_words = length/64 * total_cmds;

    fpga_ctl->writeReg(200, (uint32_t) ((unsigned long)p>>32));
    fpga_ctl->writeReg(201, (uint32_t) ((unsigned long)p));
    fpga_ctl->writeReg(202, length);
    fpga_ctl->writeReg(203, offset);
    fpga_ctl->writeReg(205, total_words);
    fpga_ctl->writeReg(206, total_qs);
    fpga_ctl->writeReg(207, total_cmds);
    
    reset_counters(fpga_ctl);

    for(int i=0;i<total_qs;i++){
        fpga_ctl->writeConfig(0x1408/4,i);
        uint32_t tag = fpga_ctl->readConfig(0x140c/4);
        fpga_ctl->writeReg(209, tag);
        fpga_ctl->writeReg(210, i+1);
        fmt::println("{}",tag&0x7f);
    }
    fpga_ctl->writeReg(210, 0);//reset tag_index

    fpga_ctl->writeReg(204, 0);//start
    fpga_ctl->writeReg(204, 1);

    sleep(2);
    uint32_t count_cmd = fpga_ctl->readReg(512+200);
    uint32_t count_word = fpga_ctl->readReg(512+201);
    uint32_t count_time = fpga_ctl->readReg(512+202);

    fmt::println("count cmd: {},right: {}",count_cmd,total_cmds);
    fmt::println("count word: {},right: {}",count_word,total_words);
    fmt::println("count time: {}",count_time);

    double speed = 1.0*length*total_cmds/(1.0*count_time*4/1000/1000/1000)/1024/1024/1024;
    fmt::println("Speed: {:.2f} GB/s", speed);

    uint32_t right_count=0;
    uint32_t wrong_count=0;
    uint32_t right_val = offset;
    for(int i=0;i<total_words;i++){
        uint32_t val = p[i*16];
        if(right_val != val){
            // printf("%d ",val);
            wrong_count++;
        }else{
            right_count++;
        }
        right_val++;
        for(int j=1;j<16;j++){
            if(p[i*16+j]!=val){
                // printf("Error\n");
            }
        }
    }
    fmt::println("right data count: {}, wrong data count: {}\n",right_count, wrong_count);

    cpu_mem_ctl->free(dma_buff);

    throughput_benchmark_print_counters(fpga_ctl);
}

void h2c_benchmark_random(uint8_t pci_bus){
    fmt::println("=====H2C random benchmark start=====");

    size_t size = 1UL*1024*1024*1024;

    FPGACtl::explictInit(pci_bus, 4 * 1024 * 1024);
    auto fpga_ctl = FPGACtl::getInstance(pci_bus);

    auto cpu_mem_ctl = CPUMemCtl::getInstance(1UL * 1024 * 1024 * 1024);

    cpu_mem_ctl->writeTLB([=](uint32_t page_index, uint32_t page_size, uint64_t vaddr, uint64_t paddr) {
        fpga_ctl->writeReg(8, (uint32_t) (vaddr));
        fpga_ctl->writeReg(9, (uint32_t) ((vaddr) >> 32));
        fpga_ctl->writeReg(10, (uint32_t) (paddr));
        fpga_ctl->writeReg(11, (uint32_t) ((paddr) >> 32));
        fpga_ctl->writeReg(12, (page_index == 0));
        fpga_ctl->writeReg(13, 1);
        fpga_ctl->writeReg(13, 0);
    });

    auto dma_buff = cpu_mem_ctl->alloc(size);
    auto p = (uint32_t *) dma_buff;

    uint32_t burst_length = 256;
    uint32_t busrt_length_shift = (uint32_t)log2(burst_length);
    uint32_t total_qs = 16;
    uint32_t total_cmds = 256*1024;
    uint32_t total_words = burst_length/64 * total_cmds;

    for(int i=0;i<size/64;i++){//initial
        p[i*8] = i*64;//sizeof(size_t)*8=512
    }

    fpga_ctl->writeReg(100, (uint32_t) ((unsigned long)p>>32));
    fpga_ctl->writeReg(101, (uint32_t) ((unsigned long)p));
    fpga_ctl->writeReg(102, burst_length);
    fpga_ctl->writeReg(103, busrt_length_shift);
    fpga_ctl->writeReg(105, total_words);
    fpga_ctl->writeReg(106, total_qs);
    fpga_ctl->writeReg(107, total_cmds);

    reset_counters(fpga_ctl);

    //start
    fpga_ctl->writeReg(104, 0);
    fpga_ctl->writeReg(104, 1);

    sleep(1);
    unsigned int cycles = fpga_ctl->readReg(512+104);

    fmt::print("\n");
    fmt::println("count_err_data:    0x{}, should be zero", fpga_ctl->readReg(512+100));
    fmt::println("count_right_data:  0x{}", fpga_ctl->readReg(512+101));
    fmt::println("count_total_words: 0x{}", fpga_ctl->readReg(512+102));
    fmt::println("count_send_cmd:    0x{}", fpga_ctl->readReg(512+103));

    fmt::println("Cycles: %d",cycles);
    double speed = 1.0*burst_length*total_cmds/(1.0*cycles*4/1000/1000/1000)/1024/1024/1024;

    fmt::println("Total length: {}",total_words*64);
    fmt::println("Speed: {:.2f} GB/s",speed);
    fmt::println("Expected words per q: 0x{:x}",total_words/total_qs);
    fmt::print("Real words per q: ");
    for(int i=0;i<16;i++){
        fmt::print("{:x} ", fpga_ctl->readReg(512 + 105 + i));
    }
    fmt::print("\n");

    cpu_mem_ctl->free(dma_buff);

    random_benchmark_print_counters(fpga_ctl);
}

void c2h_benchmark_random(uint8_t pci_bus){
    fmt::println("=====C2H random benchmark start=====");

    auto fpga_ctl = FPGACtl::getInstance(pci_bus);

    auto cpu_mem_ctl = CPUMemCtl::getInstance(1UL * 1024 * 1024 * 1024);

	size_t size = 1L*1024*1024*1024;

    cpu_mem_ctl->writeTLB([=](uint32_t page_index, uint32_t page_size, uint64_t vaddr, uint64_t paddr) {
        fpga_ctl->writeReg(8, (uint32_t) (vaddr));
        fpga_ctl->writeReg(9, (uint32_t) ((vaddr) >> 32));
        fpga_ctl->writeReg(10, (uint32_t) (paddr));
        fpga_ctl->writeReg(11, (uint32_t) ((paddr) >> 32));
        fpga_ctl->writeReg(12, (page_index == 0));
        fpga_ctl->writeReg(13, 1);
        fpga_ctl->writeReg(13, 0);
    });

    auto dma_buff = cpu_mem_ctl->alloc(size);
    auto p = (uint32_t *) dma_buff;

    memset(p, 0, size);

	uint32_t burst_length = 1024;//32K has ever triggered the horrible bug
	uint32_t busrt_length_shift = (uint32_t)log2(burst_length);
	uint32_t total_cmds = 32*1024;
	uint32_t total_qs = 4;
	uint32_t total_words = burst_length/64 * total_cmds;

	fpga_ctl->writeReg(200, (uint32_t) ((unsigned long)p>>32));
	fpga_ctl->writeReg(201, (uint32_t) ((unsigned long)p));
	fpga_ctl->writeReg(202, burst_length);
	fpga_ctl->writeReg(203, busrt_length_shift);
	fpga_ctl->writeReg(205, total_words);
	fpga_ctl->writeReg(206, total_qs);
	fpga_ctl->writeReg(207, total_cmds);

    reset_counters(fpga_ctl);

	for(int i=0;i<total_qs;i++){
		fpga_ctl->writeConfig(0x1408/4,i);
		uint32_t tag = fpga_ctl->readConfig(0x140c/4);
		fpga_ctl->writeReg(209, tag);
		fpga_ctl->writeReg(210, i+1);
        fmt::println("{}",tag&0x7f);
	}
	fpga_ctl->writeReg(210, 0);//reset tag_index

	fpga_ctl->writeReg(204, 0);//start
	fpga_ctl->writeReg(204, 1);

	sleep(2);
	uint32_t count_cmds = fpga_ctl->readReg(512+200);
	uint32_t count_words = fpga_ctl->readReg(512+201);
	uint32_t count_time = fpga_ctl->readReg(512+202);

    fmt::println("count cmd: {},right: {}",count_cmds,total_cmds);
    fmt::println("count word: {},right: {}",count_words,total_words);
    fmt::println("count time: {}",count_time);

	double speed = 1.0*burst_length*total_cmds/(1.0*count_time*4/1000/1000/1000)/1024/1024/1024;
    fmt::println("Speed: {:.2f} GB/s", speed);

	int count_written_right_word = 0;
	int count_written_word = 0;
	for(int i=0;i<size/64;i++){
		if(p[i*8] != 0){
			count_written_word++;
		}
		if(p[i*8] == i*64){
			count_written_right_word++;
		}
	}
	fmt::println("count_written_word:{}, count_written_right_word:{}, total words:{}",count_written_word,count_written_right_word,total_words);
	if(count_time > 2 * 603700){
        random_benchmark_print_counters(fpga_ctl);
	}

    cpu_mem_ctl->free(dma_buff);
}

void concurrent_random(uint8_t pci_bus){
    fmt::println("=====Bidirection throughput benchmark start=====");

    auto fpga_ctl = FPGACtl::getInstance(pci_bus);

    auto cpu_mem_ctl = CPUMemCtl::getInstance(1UL * 1024 * 1024 * 1024);

	size_t size = 1L*1024*1024*1024;

    cpu_mem_ctl->writeTLB([=](uint32_t page_index, uint32_t page_size, uint64_t vaddr, uint64_t paddr) {
        fpga_ctl->writeReg(8, (uint32_t) (vaddr));
        fpga_ctl->writeReg(9, (uint32_t) ((vaddr) >> 32));
        fpga_ctl->writeReg(10, (uint32_t) (paddr));
        fpga_ctl->writeReg(11, (uint32_t) ((paddr) >> 32));
        fpga_ctl->writeReg(12, (page_index == 0));
        fpga_ctl->writeReg(13, 1);
        fpga_ctl->writeReg(13, 0);
    });

    auto dma_buff = cpu_mem_ctl->alloc(size);
    auto p = (uint32_t *) dma_buff;

	for(int i=0;i<size/64;i++){//initial
		p[i*8] = i*64;//sizeof(size_t)*8=512
	}

	uint32_t burst_length = 256;
	uint32_t busrt_length_shift = (uint32_t)log2(burst_length);
	uint32_t total_qs = 8;
	uint32_t total_cmds = 256*1024;
	uint32_t total_words = burst_length/64 * total_cmds;

	uint32_t h2c_factor = 1;//smaller one is reliable
	uint32_t c2h_factor = 2;

	//h2c
	fpga_ctl->writeReg(100, (uint32_t) ((unsigned long)p>>32));
	fpga_ctl->writeReg(101, (uint32_t) ((unsigned long)p));
	fpga_ctl->writeReg(102, burst_length);
	fpga_ctl->writeReg(103, busrt_length_shift);
	fpga_ctl->writeReg(105, total_words*h2c_factor);
	fpga_ctl->writeReg(106, total_qs);
	fpga_ctl->writeReg(107, total_cmds*h2c_factor);

	//c2h
	fpga_ctl->writeReg(200, (uint32_t) ((unsigned long)p>>32));
	fpga_ctl->writeReg(201, (uint32_t) ((unsigned long)p));
	fpga_ctl->writeReg(202, burst_length);
	fpga_ctl->writeReg(203, busrt_length_shift);
	fpga_ctl->writeReg(205, total_words*c2h_factor);
	fpga_ctl->writeReg(206, total_qs);
	fpga_ctl->writeReg(207, total_cmds*c2h_factor);

    reset_counters(fpga_ctl);

	for(int i=0;i<total_qs;i++){
		fpga_ctl->writeConfig(0x1408/4,i);
		uint32_t tag = fpga_ctl->readConfig(0x140c/4);
		fpga_ctl->writeReg(209, tag);
		fpga_ctl->writeReg(210, i+1);
        fmt::println("{}",tag&0x7f);
	}
	fpga_ctl->writeReg(210, 0);//reset tag_index


	//start
	fpga_ctl->writeReg(104, 0);
	fpga_ctl->writeReg(204, 0);//start
	fpga_ctl->writeReg(104, 1);
	fpga_ctl->writeReg(204, 1);
	sleep(2);

	fmt::println("H2C statistics:");
	unsigned int h2c_cycles = fpga_ctl->readReg(512+104);
	fmt::println("count_err_data:    0x{:x}, should be zero",fpga_ctl->readReg(512+100));
	fmt::println("count_right_data:  0x{:x}",fpga_ctl->readReg(512+101));
	fmt::println("count_total_words: 0x{:x}",fpga_ctl->readReg(512+102));
	fmt::println("count_send_cmd:    0x{:x}",fpga_ctl->readReg(512+103));

	fmt::println("H2C Cycles: {}",h2c_cycles);
	double h2c_speed = 1.0*h2c_factor*burst_length*total_cmds/(1.0*h2c_cycles*4/1000/1000/1000)/1024/1024/1024;
	fmt::println("Total length: {}",total_words*64);
	fmt::println("Expected words per q: 0x{:x}",total_words/total_qs);
    fmt::print("Real words per q: ");
    for(int i=0;i<16;i++){
        fmt::print("{:x} ", fpga_ctl->readReg(512 + 105 + i));
    }
    fmt::print("\n");

	fmt::println("\nC2H statistics:");
	uint32_t count_cmds = fpga_ctl->readReg(512+200);
	uint32_t count_words = fpga_ctl->readReg(512+201);
	uint32_t c2h_cycles = fpga_ctl->readReg(512+202);
	fmt::println("C2H Cycles: {}",c2h_cycles);

	fmt::println("count_cmds: {},total: {}",count_cmds,total_cmds);
	fmt::println("count_words: {},total: {}",count_words,total_words);

	double c2h_speed = 1.0*c2h_factor*burst_length*total_cmds/(1.0*c2h_cycles*4/1000/1000/1000)/1024/1024/1024;

	if(h2c_cycles>c2h_cycles){//c2h is reliable
		fmt::println("H2C Speed: {:.2f} GB/s [X]",h2c_speed);
		fmt::println("C2H Speed: {:.2f} GB/s [√]",c2h_speed);
	}else{
		fmt::println("H2C Speed: {:.2f} GB/s [√]",h2c_speed);
		fmt::println("C2H Speed: {:.2f} GB/s [X]",c2h_speed);
	}

    cpu_mem_ctl->free(dma_buff);

    random_benchmark_print_counters(fpga_ctl);
}

void h2c_benchmark_latency(uint8_t pci_bus){
    fmt::println("=====H2C latency benchmark start=====");

    FPGACtl::explictInit(pci_bus, 4 * 1024 * 1024);
    auto fpga_ctl = FPGACtl::getInstance(pci_bus);

    auto cpu_mem_ctl = CPUMemCtl::getInstance(1UL * 1024 * 1024 * 1024);

	size_t size = 1UL*1024*1024*1024;

    cpu_mem_ctl->writeTLB([=](uint32_t page_index, uint32_t page_size, uint64_t vaddr, uint64_t paddr) {
        fpga_ctl->writeReg(8, (uint32_t) (vaddr));
        fpga_ctl->writeReg(9, (uint32_t) ((vaddr) >> 32));
        fpga_ctl->writeReg(10, (uint32_t) (paddr));
        fpga_ctl->writeReg(11, (uint32_t) ((paddr) >> 32));
        fpga_ctl->writeReg(12, (page_index == 0));
        fpga_ctl->writeReg(13, 1);
        fpga_ctl->writeReg(13, 0);
    });

    auto dma_buff = cpu_mem_ctl->alloc(size);
    auto p = (uint32_t *) dma_buff;

	uint32_t burst_length = 4*1024;
	uint32_t total_cmds = 256*1024;
	uint32_t total_words = burst_length/64 * total_cmds;
	uint32_t wait_cycles = 50; //100=2.5Mops,when 4K burst, 100=10GB/s

	for(int i=0;i<size/64;i++){//initial
		p[i*8] = i*64;//sizeof(size_t)*8=512
	}

	fpga_ctl->writeReg(100, (uint32_t) ((unsigned long)p>>32));
	fpga_ctl->writeReg(101, (uint32_t) ((unsigned long)p));
	fpga_ctl->writeReg(102, burst_length);
	fpga_ctl->writeReg(104, total_words);
	fpga_ctl->writeReg(105, total_cmds);
	fpga_ctl->writeReg(106, wait_cycles);

	//start
	fpga_ctl->writeReg(103, 0);
	fpga_ctl->writeReg(103, 1);

	sleep(1);
	unsigned int cycles = fpga_ctl->readReg(512+104);
	fmt::print("\n");
	fmt::println("burst length: {}",burst_length);
	fmt::println("count_err_data:    0x{:x}, should be 0x0",fpga_ctl->readReg(512+100));
	fmt::println("count_right_data:  0x{:x}, shoule be 0x{:x}",fpga_ctl->readReg(512+101),total_words);
	fmt::println("count_total_words: 0x{:x}, shoule be 0x{:x}",fpga_ctl->readReg(512+102),total_words);
	fmt::println("count_send_cmd:    0x{:x}, shoule be 0x{:x}",fpga_ctl->readReg(512+103),total_cmds);

	fmt::println("Cycles: {}",cycles);
	double speed = 1.0*burst_length*total_cmds/(1.0*cycles*4/1000/1000/1000)/1024/1024/1024;
	fmt::println("Total length: {}",total_words*64);
	fmt::println("Speed: {:.1f} GB/s",speed);

	size_t count_latency = (((size_t)fpga_ctl->readReg(512+106))<<32)+fpga_ctl->readReg(512+105);
	fmt::println("count_latency        0x{:x}",count_latency);
	fmt::println("wait cycles          {}",wait_cycles);
	double average_latency = 1.0*count_latency*4/total_cmds/1000;//us
	fmt::println("average_latency	   {:.1f} us",average_latency);
	double ops_limit = 1.0*250*1024*1024 / wait_cycles/1024/1024;//Mps
	fmt::println("ops_limit            {:.1f} Mops",ops_limit);
	double ops = 1.0*total_cmds/(1.0*cycles*4/1000/1000/1000)/1024/1024;//Mps
	fmt::println("ops                  {:.1f} Mops",ops);
	fmt::print("\n");
	// printCounters();
    cpu_mem_ctl->free(dma_buff);
}

void c2h_benchmark_latency(uint8_t pci_bus){
    fmt::println("=====C2H latency benchmark start=====");

    auto fpga_ctl = FPGACtl::getInstance(pci_bus);

    auto cpu_mem_ctl = CPUMemCtl::getInstance(1UL * 1024 * 1024 * 1024);

    cpu_mem_ctl->writeTLB([=](uint32_t page_index, uint32_t page_size, uint64_t vaddr, uint64_t paddr) {
        fpga_ctl->writeReg(8, (uint32_t) (vaddr));
        fpga_ctl->writeReg(9, (uint32_t) ((vaddr) >> 32));
        fpga_ctl->writeReg(10, (uint32_t) (paddr));
        fpga_ctl->writeReg(11, (uint32_t) ((paddr) >> 32));
        fpga_ctl->writeReg(12, (page_index == 0));
        fpga_ctl->writeReg(13, 1);
        fpga_ctl->writeReg(13, 0);
    });

	size_t size = 1L*1024*1024*1024;

    cpu_mem_ctl->writeTLB([=](uint32_t page_index, uint32_t page_size, uint64_t vaddr, uint64_t paddr) {
        fpga_ctl->writeReg(8, (uint32_t) (vaddr));
        fpga_ctl->writeReg(9, (uint32_t) ((vaddr) >> 32));
        fpga_ctl->writeReg(10, (uint32_t) (paddr));
        fpga_ctl->writeReg(11, (uint32_t) ((paddr) >> 32));
        fpga_ctl->writeReg(12, (page_index == 0));
        fpga_ctl->writeReg(13, 1);
        fpga_ctl->writeReg(13, 0);
    });

    auto dma_buff = cpu_mem_ctl->alloc(size);
    auto p = (uint32_t *) dma_buff;

	for(size_t i=0;i<size/sizeof(size_t);i++){
		p[i]=0;
	}

	uint32_t burst_length = 4*1024;
	uint32_t offset = 5;
	uint32_t total_cmds = 256*1024;
	uint32_t total_words = burst_length/64 * total_cmds;
	uint32_t wait_cycles = 50; //100=2.5Mops,when 4K burst, 100=10GB/s

	fpga_ctl->writeReg(200, (uint32_t) ((unsigned long)p>>32));
	fpga_ctl->writeReg(201, (uint32_t) ((unsigned long)p));
	fpga_ctl->writeReg(202, burst_length);
	fpga_ctl->writeReg(203, offset);
	fpga_ctl->writeReg(205, total_words);
	fpga_ctl->writeReg(206, total_cmds);
	fpga_ctl->writeReg(207, wait_cycles);

	for(int i=0;i<1;i++){//one q in total
		fpga_ctl->writeConfig(0x1408/4, i);
		uint32_t tag = fpga_ctl->readConfig(0x140c/4);
		fpga_ctl->writeReg(209, tag);
		fpga_ctl->writeReg(210, i+1);
        fmt::println("{}",tag&0x7f);
	}
	fpga_ctl->writeReg(210, 0);//reset tag_index

	int beats = burst_length/64;
	volatile size_t*p_data = (volatile size_t*)p;

	fpga_ctl->writeReg(204, 0);//start
	fpga_ctl->writeReg(204, 1);

	for(int i=0;i<total_cmds;i++){
		while(p_data[i*8*beats] != offset+i*64*beats){
		}
        fpga_ctl->writeBridge(0, {1, 1, 1, 1, 1, 1, 1, 1});
	}

	uint32_t count_cmds = fpga_ctl->readReg(512+200);
	uint32_t count_words = fpga_ctl->readReg(512+201);
	uint32_t count_time = fpga_ctl->readReg(512+202);
	uint32_t count_recv_ack = fpga_ctl->readReg(512+207);

	int count_error = 0;
	for(size_t i=0;i<total_words;i++){
		if(p[i*8] != offset+64*i){
			count_error++;
		}
	}
	fmt::println("burst length: {}",burst_length);
	fmt::println("count_cmds:     0x{:x},should be: 0x{:x}",count_cmds,total_cmds);
	fmt::println("count_recv_ack: 0x{:x},should be: 0x{:x}",count_recv_ack,total_cmds);
	fmt::println("count_words:    0x{:x},should be: 0x{:x}",count_words,total_words);
	fmt::println("count_error:    0x{:x},shoule be: 0x0",count_error);
	fmt::println("count time: {}",count_time);

	double speed = 1.0*burst_length*total_cmds/(1.0*count_time*4/1000/1000/1000)/1024/1024/1024;
	fmt::println("Speed: {:.2f} GB/s",speed);

	size_t count_latency_cmd = (((size_t)fpga_ctl->readReg(512+204))<<32)+fpga_ctl->readReg(512+203);
	size_t count_latency_data = (((size_t)fpga_ctl->readReg(512+206))<<32)+fpga_ctl->readReg(512+205);
	fmt::println("count_latency_cmd      0x{:x}",count_latency_cmd);
	fmt::println("count_latency_data     0x{:x}",count_latency_data);

	double average_latency_cmd = 1.0*count_latency_cmd*4/total_cmds/1000;//us
	double average_latency_data = 1.0*count_latency_data*4/total_cmds/1000;//us
	double ops_limit = 1.0*250*1024*1024 / wait_cycles/1024/1024;//Mps
	double ops = 1.0*total_cmds/(1.0*count_time*4/1000/1000/1000)/1024/1024;//Mps
	fmt::println("wait cycles              {}",wait_cycles);
	fmt::println("average_latency_cmd      {:.1f} us",average_latency_cmd);
	fmt::println("average_latency_data     {:.1f} us",average_latency_data);
	fmt::println("ops_limit                {:.1f} Mops",ops_limit);
	fmt::println("ops                      {:.1f} Mops",ops);
	// printCounters();
    cpu_mem_ctl->free(dma_buff);
}

void concurrent_latency(uint8_t pci_bus){
    fmt::println("=====Bidirection latency benchmark start=====");

    auto fpga_ctl = FPGACtl::getInstance(pci_bus);

    auto cpu_mem_ctl = CPUMemCtl::getInstance(1UL * 1024 * 1024 * 1024);

	size_t size = 1L*1024*1024*1024;

    cpu_mem_ctl->writeTLB([=](uint32_t page_index, uint32_t page_size, uint64_t vaddr, uint64_t paddr) {
        fpga_ctl->writeReg(8, (uint32_t) (vaddr));
        fpga_ctl->writeReg(9, (uint32_t) ((vaddr) >> 32));
        fpga_ctl->writeReg(10, (uint32_t) (paddr));
        fpga_ctl->writeReg(11, (uint32_t) ((paddr) >> 32));
        fpga_ctl->writeReg(12, (page_index == 0));
        fpga_ctl->writeReg(13, 1);
        fpga_ctl->writeReg(13, 0);
    });
    
    auto dma_buff = cpu_mem_ctl->alloc(size);
	size_t * p_h2c = (size_t *) dma_buff;
	size_t * p_c2h = ((size_t *) dma_buff) + size/2/sizeof(size_t);

	for(int i=0;i<size/2/64;i++){//initial
		p_h2c[i*8] = i*64;//sizeof(size_t)*8=512
	}

	for(size_t i=0;i<size/2/sizeof(size_t);i++){
		p_c2h[i]=0;
	}

	uint32_t burst_length = 64;
	uint32_t offset = 5;
	uint32_t total_cmds = 128*1024;
	uint32_t total_words = burst_length/64 * total_cmds;
	uint32_t wait_cycles = 50; //100=2.5Mops,when 4K burst, 100=10GB/s

	fpga_ctl->writeReg(100, (uint32_t) ((unsigned long)p_h2c>>32));
	fpga_ctl->writeReg(101, (uint32_t) ((unsigned long)p_h2c));
	fpga_ctl->writeReg(102, burst_length);
	fpga_ctl->writeReg(104, total_words);
	fpga_ctl->writeReg(105, total_cmds);
	fpga_ctl->writeReg(106, wait_cycles);

	fpga_ctl->writeReg(200, (uint32_t) ((unsigned long)p_c2h>>32));
	fpga_ctl->writeReg(201, (uint32_t) ((unsigned long)p_c2h));
	fpga_ctl->writeReg(202, burst_length);
	fpga_ctl->writeReg(203, offset);
	fpga_ctl->writeReg(205, total_words);
	fpga_ctl->writeReg(206, total_cmds);
	fpga_ctl->writeReg(207, wait_cycles);

	for(int i=0;i<1;i++){//one q in total
		fpga_ctl->writeConfig(0x1408/4,i);
		uint32_t tag = fpga_ctl->readConfig(0x140c/4);
		fpga_ctl->writeReg(209, tag);
		fpga_ctl->writeReg(210, i+1);
        fmt::println("{}",tag&0x7f);
	}
	fpga_ctl->writeReg(210, 0);//reset tag_index

    uint64_t data[8];
	for(int i=0;i<8;i++){
		data[i] = 1;
	}

	int beats = burst_length/64;
    volatile size_t *p_data = (volatile size_t *) p_c2h;
    
	//start
	fpga_ctl->writeReg(103, 0);
	fpga_ctl->writeReg(204, 0);
	fpga_ctl->writeReg(103, 1);
	fpga_ctl->writeReg(204, 1);

	for(int i=0;i<total_cmds;i++){
		while(p_data[i*8*beats] != offset+i*64*beats){
		}
        fpga_ctl->writeBridge(0, data);
	}

	sleep(1);

	{//h2c
		unsigned int cycles = fpga_ctl->readReg(512+104);
		fmt::println("H2C status:");
		fmt::println("count_err_data:    0x{:x}, should be 0x0",fpga_ctl->readReg(512+100));
		fmt::println("count_right_data:  0x{:x}, shoule be 0x{:x}",fpga_ctl->readReg(512+101),total_words);
		fmt::println("count_total_words: 0x{:x}, shoule be 0x{:x}",fpga_ctl->readReg(512+102),total_words);
		fmt::println("count_send_cmd:    0x{:x}, shoule be 0x{:x}",fpga_ctl->readReg(512+103),total_cmds);

		fmt::println("Cycles: {}\n",cycles);
		double speed = 1.0*burst_length*total_cmds/(1.0*cycles*4/1000/1000/1000)/1024/1024/1024;
		fmt::println("Total length: {}",total_words*64);
		fmt::println("Speed: {:.1f} GB/s",speed);

		size_t count_latency = (((size_t)fpga_ctl->readReg(512+106))<<32)+fpga_ctl->readReg(512+105);
		fmt::println("count_latency	   0x{:x}",count_latency);
		fmt::println("wait cycles          {}",wait_cycles);
		double average_latency = 1.0*count_latency*4/total_cmds/1000;//us
		fmt::println("average_latency	     {:.1f} us",average_latency);
		double ops_limit = 1.0*250*1024*1024 / wait_cycles/1024/1024;//Mps
		fmt::println("ops_limit            {:.1f} Mops",ops_limit);
		double ops = 1.0*total_cmds/(1.0*cycles*4/1000/1000/1000)/1024/1024;//Mps
		fmt::println("ops                  {:.1f} Mops",ops);
        fmt::print("\n");
	}

	{//c2h
		printf("C2H status:\n");
		uint32_t count_cmds = fpga_ctl->readReg(512+200);
		uint32_t count_words = fpga_ctl->readReg(512+201);
		uint32_t count_time = fpga_ctl->readReg(512+202);
		uint32_t count_recv_ack = fpga_ctl->readReg(512+207);

		int count_error = 0;
		for(size_t i=0;i<total_words;i++){
			if(p_c2h[i*8] != offset+64*i){
				count_error++;
			}
		}
		fmt::println("count_cmds:     0x{:x},should be: 0x{:x}",count_cmds,total_cmds);
		fmt::println("count_recv_ack: 0x{:x},should be: 0x{:x}",count_recv_ack,total_cmds);
		fmt::println("count_words:    0x{:x},should be: 0x{:x}",count_words,total_words);
		fmt::println("count_error:    0x{:x},shoule be: 0x0",count_error);
		fmt::println("count time: {}",count_time);

		double speed = 1.0*burst_length*total_cmds/(1.0*count_time*4/1000/1000/1000)/1024/1024/1024;
		fmt::println("Speed: {:.2f} GB/s",speed);

		size_t count_latency_cmd = (((size_t)fpga_ctl->readReg(512+204))<<32)+fpga_ctl->readReg(512+203);
		size_t count_latency_data = (((size_t)fpga_ctl->readReg(512+206))<<32)+fpga_ctl->readReg(512+205);
		fmt::println("count_latency_cmd      0x{:x}",count_latency_cmd);
		fmt::println("count_latency_data     0x{:x}",count_latency_data);

		double average_latency_cmd = 1.0*count_latency_cmd*4/total_cmds/1000;//us
		double average_latency_data = 1.0*count_latency_data*4/total_cmds/1000;//us
		double ops_limit = 1.0*250*1024*1024 / wait_cycles/1024/1024;//Mps
		double ops = 1.0*total_cmds/(1.0*count_time*4/1000/1000/1000)/1024/1024;//Mps
		fmt::println("wait cycles              {}",wait_cycles);
		fmt::println("average_latency_cmd      {:.1f} us",average_latency_cmd);
		fmt::println("average_latency_data     {:.1f} us",average_latency_data);
		fmt::println("ops_limit                {:.1f} Mops",ops_limit);
		fmt::println("ops                      {:.1f} Mops",ops);
	}
    cpu_mem_ctl->free(dma_buff);
}
